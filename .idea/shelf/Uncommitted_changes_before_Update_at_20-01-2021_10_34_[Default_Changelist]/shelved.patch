Index: app/src/main/java/com/A4/oplev/Activity_Ini.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.A4.oplev;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.app.NotificationChannel;\r\nimport android.app.NotificationManager;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.preference.PreferenceManager;\r\nimport android.util.Log;\r\nimport android.widget.Toast;\r\n\r\nimport com.A4.oplev.__Main.Activity_Main;\r\nimport com.facebook.CallbackManager;\r\nimport com.facebook.FacebookCallback;\r\nimport com.facebook.FacebookException;\r\nimport com.facebook.GraphRequest;\r\nimport com.facebook.GraphResponse;\r\nimport com.facebook.Profile;\r\nimport com.facebook.login.LoginManager;\r\nimport com.facebook.login.LoginResult;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.firestore.CollectionReference;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.Query;\r\nimport com.google.firebase.firestore.QuerySnapshot;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\nimport com.google.firebase.crashlytics.FirebaseCrashlytics;\r\n\r\nimport java.io.Serializable;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\n\r\nimport Controller.EventController;\r\nimport Controller.UserController;\r\nimport DAL.Classes.ChatDAO;\r\nimport DAL.Classes.EventDAO;\r\nimport DAL.Classes.UserDAO;\r\nimport DAL.Classes.UserDAO;\r\nimport DAL.Interfaces.CallbackUser;\r\nimport DTO.UserDTO;\r\n\r\npublic class Activity_Ini extends AppCompatActivity implements Serializable {\r\n    UserController userController;\r\n    UserDTO userDTO;\r\n    SharedPreferences prefs;\r\n    Context ctx;\r\n    boolean onInstance;\r\n    ArrayList<String> pictures;\r\n    PicassoFunc picasso;\r\n    private FirebaseAuth mAuth;\r\n    private CallbackManager callbackManager;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity__ini);\r\n        mAuth = FirebaseAuth.getInstance();\r\n\r\n\r\n\r\n\r\n        //KØR NEDENSTÅENDE FOR AT RESETTE OG UDKOMMENTER EFTER\r\n        //FirebaseAuth.getInstance().signOut();\r\n        //PreferenceManager.getDefaultSharedPreferences(ctx).edit().clear().apply();\r\n\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n\r\n        createNotificationChannel();\r\n        // Check if user is signed in (non-null) and update UI accordingly.\r\n        FirebaseUser currentUser = mAuth.getCurrentUser();\r\n        userController = UserController.getInstance();\r\n        ctx = this;\r\n        prefs = PreferenceManager.getDefaultSharedPreferences(this);\r\n        onInstance = prefs.getBoolean(\"onInstance\", false);\r\n\r\n        //Laver controllerne med implemetationerene af DAO, da de er singeltons skal der alle andre steder bare kaldes getInstance()\r\n\r\n        UserController.getInstance(new UserDAO(), new ChatDAO(), new EventDAO());\r\n        EventController.getInstance(new UserDAO(), new EventDAO());\r\n\r\n\r\n       if(currentUser == null){\r\n            prefs.edit().putBoolean(\"onInstance\", false).apply();\r\n            Intent i = new Intent(this, Activity_Main.class);\r\n            i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n            startActivity(i);\r\n\r\n        }else {\r\n           if (prefs.getBoolean(\"facebook\",false)){\r\n               LoginManager.getInstance().logInWithReadPermissions(this, Arrays.asList(\"public_profile\", \"email\", \"user_birthday\"));\r\n               callbackManager = CallbackManager.Factory.create();\r\n               LoginManager.getInstance().registerCallback(callbackManager, new FacebookCallback<LoginResult>() {\r\n                   @Override\r\n                   public void onSuccess(LoginResult loginResult) {\r\n                       Profile profile = Profile.getCurrentProfile();\r\n                       userController.getUser(new CallbackUser() {\r\n                           @Override\r\n                           public void onCallback(UserDTO user) {\r\n                               setUserDTO(user);\r\n                               try {\r\n                                   prefs.edit().putString(\"userId\", user.getUserId()).apply();\r\n                               } catch (Exception e) {\r\n                                   FirebaseAuth.getInstance().signOut();\r\n                                   PreferenceManager.getDefaultSharedPreferences(ctx).edit().clear().apply();\r\n                               }\r\n\r\n                               Intent i = new Intent(ctx, Activity_Main.class);\r\n                               userController.setCurrUser(user);\r\n                               FirebaseCrashlytics.getInstance().setUserId(user.getUserId());\r\n                               i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n\r\n                               startActivity(i);\r\n                           }\r\n                       }, profile.getId());\r\n                   }\r\n\r\n                   @Override\r\n                   public void onCancel() {\r\n                       Toast.makeText(ctx,\"Cancelled\",Toast.LENGTH_SHORT).show();\r\n                   }\r\n\r\n                   @Override\r\n                   public void onError(FacebookException error) {\r\n                       Toast.makeText(ctx,error.toString(),Toast.LENGTH_SHORT).show();\r\n                   }\r\n               });\r\n           } else {\r\n               prefs.edit().putBoolean(\"onInstance\", true).apply();\r\n\r\n               userController.getUser(new CallbackUser() {\r\n                   @Override\r\n                   public void onCallback(UserDTO user) {\r\n                       setUserDTO(user);\r\n                       try {\r\n                           prefs.edit().putString(\"userId\", user.getUserId()).apply();\r\n                       } catch (Exception e) {\r\n                           FirebaseAuth.getInstance().signOut();\r\n                           PreferenceManager.getDefaultSharedPreferences(ctx).edit().clear().apply();\r\n                       }\r\n\r\n                        Intent i = new Intent(ctx, Activity_Main.class);\r\n                        userController.setCurrUser(user);\r\n                        FirebaseCrashlytics.getInstance().setUserId(user.getUserId());\r\n                        i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n\r\n                       startActivity(i);\r\n                   }\r\n               }, currentUser.getUid());\r\n\r\n\r\n           }\r\n        }\r\n\r\n    }\r\n/*\r\n    private void getUserPictures() {\r\n        pictures = controller.getUserPictures();\r\n        for(int i = 0; i<pictures.size(); i++){\r\n\r\n            if(pictures.get(i) != null){\r\n                Picasso.get().load(pictures.get(i)).into(picassoFunc.picassoImageTarget(getApplicationContext(), \"imageDir\", \"ppic\"+i+\".png\"));\r\n            } else System.out.println(\"hejTESST\");\r\n\r\n        }\r\n\r\n    } */\r\n\r\n\r\n    private void setUserDTO(UserDTO dto){\r\n        this.userDTO = dto;\r\n    }\r\n\r\n    private void createNotificationChannel() {\r\n        final String CHANNEL_ID = \"0\";\r\n        // Create the NotificationChannel, but only on API 26+ because\r\n        // the NotificationChannel class is new and not in the support library\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            CharSequence name = getString(R.string.channel_name);\r\n            String description = getString(R.string.channel_description);\r\n            int importance = NotificationManager.IMPORTANCE_DEFAULT;\r\n            NotificationChannel channel = new NotificationChannel(CHANNEL_ID, name, importance);\r\n            channel.setDescription(description);\r\n            // Register the channel with the system; you can't change the importance\r\n            // or other notification behaviors after this\r\n            NotificationManager notificationManager = getSystemService(NotificationManager.class);\r\n            notificationManager.createNotificationChannel(channel);\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/A4/oplev/Activity_Ini.java	(revision 2ab40f5dbfd056a3a041f8288060b858647ed490)
+++ app/src/main/java/com/A4/oplev/Activity_Ini.java	(date 1611064687293)
@@ -68,6 +68,10 @@
         mAuth = FirebaseAuth.getInstance();
 
 
+        //Laver controllerne med implemetationerene af DAO, da de er singeltons skal der alle andre steder bare kaldes getInstance()
+
+        UserController.getInstance(new UserDAO(), new ChatDAO(), new EventDAO());
+        EventController.getInstance(new UserDAO(), new EventDAO());
 
 
         //KØR NEDENSTÅENDE FOR AT RESETTE OG UDKOMMENTER EFTER
@@ -90,10 +94,6 @@
         prefs = PreferenceManager.getDefaultSharedPreferences(this);
         onInstance = prefs.getBoolean("onInstance", false);
 
-        //Laver controllerne med implemetationerene af DAO, da de er singeltons skal der alle andre steder bare kaldes getInstance()
-
-        UserController.getInstance(new UserDAO(), new ChatDAO(), new EventDAO());
-        EventController.getInstance(new UserDAO(), new EventDAO());
 
 
        if(currentUser == null){
Index: app/src/main/java/com/A4/oplev/Like_Hjerte_Side/OwnEvent_frag.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.A4.oplev.Like_Hjerte_Side;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.PendingIntent;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.core.app.NotificationCompat;\r\nimport androidx.core.app.NotificationManagerCompat;\r\nimport androidx.core.app.TaskStackBuilder;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.A4.oplev.R;\r\nimport com.A4.oplev._Adapters.OwnEvents_Adapter2;\r\n\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\n\r\nimport Controller.UserController;\r\nimport DAL.Classes.EventDAO;\r\nimport DAL.Interfaces.CallbackUser;\r\nimport DTO.UserDTO;\r\n\r\npublic class OwnEvent_frag extends Fragment {\r\n    private RecyclerView recyclerView;\r\n    private EventDAO eventDAO;\r\n    private UserDTO userDTO;\r\n    private UserController userController;\r\n    private CardView sletKnap, redigerKnap;\r\n    private String currentUser;\r\n    private ArrayList<Date> dates = new ArrayList<>();\r\n    private ArrayList<Integer> eventApplicantsSize = new ArrayList<>();\r\n    private ArrayList<String> eventHeaders = new ArrayList<>(), eventOwnerPic = new ArrayList<>(),  eventEventPic = new ArrayList<>(),\r\n                              eventApplicantPic = new ArrayList<>(), eventFirstApplicants = new ArrayList<>(), eventEventID = new ArrayList<>(),\r\n                              eventParticipant = new ArrayList<>(), tempEventID = new ArrayList<>(), tempFirstApplicant = new ArrayList<>(),\r\n                              eventParticipantNames = new ArrayList<>();\r\n    private Context mContext;\r\n    View root2;\r\n    boolean eventsReady = false;\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater i, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n        View root = i.inflate(R.layout.u_settings_events_frag, container, false);\r\n        // sæt positionen til ownevent inde i activity likeside\r\n        Activity_Likeside.setPosition(0);\r\n        root2 = root;\r\n        userController = UserController.getInstance();\r\n        userDTO = userController.getCurrUser();\r\n        eventDAO = new EventDAO();\r\n\r\n        recyclerView = root.findViewById(R.id.ownEvents_Recycler);\r\n        redigerKnap = root.findViewById(R.id.own_event_edit_picture);\r\n        sletKnap = root.findViewById(R.id.own_event_delete_holder);\r\n\r\n\r\n\r\n\r\n        // *Todo - Skal vise side for eget event (Antager at der skal laves en nyt xml dokument - Men hvad skal vises?)\r\n        // *Todo - Organiser rækkefølge på events.\r\n        // Todo - Lav visuel forskel når en applicant er accepteret, og eventet dermed er faslagt. (Vis tilmeldt osv)\r\n        // Todo - Lav slet metode der fjerne det valgte element - og lav/ benyt slet metode fra backend.\r\n        // todo - Lav rediger metode der virker på det valgte element - og lav/ benyt slet metode fra backend.\r\n\r\n\r\n\r\n        // Det her er til ens egne events som andre prøver på at ansøge om at joine\r\n        // vi prøver på at hente brugeren ind hvis den af en eller anden grund ikke er\r\n        if (userDTO == null) userDTO = userController.getCurrUser();\r\n        // vi bruger den her til ikke at instantiere listviewet hvis der bliver hentet noget fra databasen\r\n        final boolean[] isGettingFromDB = {false};\r\n        if (userDTO != null) {\r\n            if (userDTO.getEvents() != null) {\r\n                // hvis brugeren ikke har nogle events så skal vi sikre os at det ikke går i stå\r\n                if (userDTO.getEvents().size() == 0) {\r\n                    eventsReady = true;\r\n                    setListView_events(eventEventPic, eventHeaders, eventOwnerPic, eventFirstApplicants, eventApplicantPic, eventApplicantsSize, eventEventID, dates, eventParticipant, eventParticipantNames);\r\n                    // setChangeListener_tilmeldinger();\r\n\r\n                }\r\n\r\n                // vi itererer over alle events\r\n                for (int j = 0; j < userDTO.getEvents().size(); j++) {\r\n                    eventDAO.getEvent(event -> {\r\n                        if (event != null) {\r\n                            // ternary operator for at få den første applicant\r\n                            String firstApplicant = event.getApplicants().size() == 0 ? \"\" : event.getApplicants().get(0);\r\n                            // Hvis der ikke er nogle applicants så indsætter vi disse værdier\r\n                            if (firstApplicant.equals(\"\")) {\r\n                                eventApplicantPic.add(\"\");\r\n                                dates.add(event.getDate());\r\n                                eventApplicantsSize.add(event.getApplicants().size());\r\n                                eventHeaders.add(event.getTitle());\r\n                                eventOwnerPic.add(event.getOwnerPic());\r\n                                eventEventPic.add(event.getEventPic());\r\n                                eventParticipantNames.add(\"\");\r\n                                eventFirstApplicants.add(firstApplicant);\r\n                                Log.d(\"eventSize test1\",  eventApplicantsSize.toString());\r\n                                eventEventID.add(event.getEventId());\r\n                                eventParticipant.add(event.getParticipant());\r\n                                // hvis det er den sidste event OG vi ikke henter noget fra databasen så kan vi køre den her kode\r\n                                if (eventApplicantPic.size() == userDTO.getEvents().size() && !isGettingFromDB[0]) {\r\n                                    // events er loadet færdigt\r\n                                    eventsReady = true;\r\n                                    // hvis chats er loadet færdigt så opsæt listviewet og listeners\r\n                                    setListView_events(eventEventPic, eventHeaders, eventOwnerPic, eventFirstApplicants, eventApplicantPic, eventApplicantsSize, eventEventID, dates, eventParticipant, eventParticipantNames);\r\n                                    // setChangeListener_tilmeldinger();\r\n                                }\r\n                            } else {\r\n                                // hvis der er mindst 1 applicant så skal vi hente noget ind fra databasen\r\n                                isGettingFromDB[0] = true;\r\n                                // vi henter applicanten og indsætter personens værdier\r\n                                userController.getUser(user -> {\r\n                                    eventApplicantPic.add(user.getUserPicture());\r\n                                    eventApplicantsSize.add(event.getApplicants().size());\r\n                                    Log.d(\"eventSize test2\",  eventApplicantsSize.toString());\r\n                                    // Todo - skal gemme navne ned - HELP\r\n//                                    userController.getUser(new CallbackUser() {\r\n//                                        @Override\r\n//                                        public void onCallback(UserDTO user) {\r\n//                                            eventParticipantNames.add(user.getfName());\r\n//                                            Log.d(\"callbackN\", eventParticipantNames.toString());\r\n//                                        }\r\n//                                    },event.getParticipant());\r\n                                    eventParticipantNames.add(\"\");\r\n\r\n\r\n                                    eventHeaders.add(event.getTitle());\r\n                                    eventOwnerPic.add(event.getOwnerPic());\r\n                                    eventEventPic.add(event.getEventPic());\r\n                                    dates.add(event.getDate());\r\n                                    eventFirstApplicants.add(firstApplicant);\r\n                                    eventEventID.add(event.getEventId());\r\n                                    eventParticipant.add(event.getParticipant());\r\n                                    // nu har vi hentet færdigt\r\n                                    isGettingFromDB[0] = false;\r\n                                    // hvis det var sidste event så kør dette\r\n                                    if (eventApplicantPic.size() == userDTO.getEvents().size()) {\r\n                                        eventsReady = true;\r\n                                        // hvis chats er færdige så opsæt listview og listeners\r\n                                        setListView_events(eventEventPic, eventHeaders, eventOwnerPic, eventFirstApplicants, eventApplicantPic, eventApplicantsSize, eventEventID, dates, eventParticipant, eventParticipantNames);\r\n                                        //setChangeListener_tilmeldinger();\r\n                                    }\r\n                                }, event.getApplicants().get(0));\r\n                            }\r\n                        }\r\n                    }, userDTO.getEvents().get(j));\r\n                }\r\n            }\r\n        };\r\n\r\n        // Todo - OnSwipe virker ikke på recylerviewet - HELP\r\n      /*  recyclerView.setOnTouchListener(new OnSwipeTouchListener(mContext){\r\n            @Override\r\n            public void onSwipeLeft() {\r\n                // Sæt farven på billederne i toppen af skærmen\r\n                getActivity().findViewById(R.id.besked_back).setVisibility(View.INVISIBLE);\r\n                getActivity().findViewById(R.id.event_back).setVisibility(View.VISIBLE);\r\n                getActivity().findViewById(R.id.hjerte_back).setVisibility(View.INVISIBLE);\r\n\r\n                // Kreer fragmentet over til hjertesiden\r\n                getFragmentManager().beginTransaction().setCustomAnimations(R.anim.enter_from_right,\r\n                        R.anim.exit_to_left).replace(R.id.likeside_frameLayout,new LikesideList_frag())\r\n                        .commit();\r\n            }\r\n        });*/\r\n\r\n\r\n        return root;\r\n    }\r\n// Todo - Listing virker ikke efter hensigten endnu.\r\n        public void setListView_events(@NonNull ArrayList<String> eventEventPic, @NonNull ArrayList<String> eventHeaders, @NonNull ArrayList<String> eventOwnerPic, @NonNull ArrayList<String> eventFirstApplicants, @NonNull ArrayList<String> eventApplicantPic, @NonNull ArrayList<Integer> eventApplicantsSize, @NonNull ArrayList<String> eventEventID, @NonNull ArrayList<Date> dates, @NonNull ArrayList<String> eventParticipant, ArrayList<String> eventParticipantNames)\r\n        {\r\n            if (mContext != null) {\r\n                ArrayList<String> tempEventPic = new ArrayList<>(), tempEventHeaders = new ArrayList<>(), tempEventOwnerPic = new ArrayList<>(), tempEventFirstApplicants = new ArrayList<>(), tempEventApplicantPic = new ArrayList<>(), tempEventID = new ArrayList<>(), tempEventParticipant = new ArrayList<>(), tempEventParticipantName= new ArrayList<>();\r\n                ArrayList<Integer> tempEventApplicantsSize = new ArrayList<>();\r\n                ArrayList<Date> tempDate = new ArrayList<>();\r\n\r\n                for (int i = 0; i < eventApplicantsSize.size(); i++) {\r\n\r\n                    if (i == 0) {\r\n                        tempEventPic.add(eventEventPic.get(i));\r\n                        tempEventHeaders.add(eventHeaders.get(i));\r\n                        tempEventApplicantPic.add(eventApplicantPic.get(i));\r\n                        tempEventApplicantsSize.add(eventApplicantsSize.get(i));\r\n                        tempEventOwnerPic.add(eventOwnerPic.get(i));\r\n                        tempEventFirstApplicants.add(eventFirstApplicants.get(i));\r\n                        tempEventID.add(eventEventID.get(i));\r\n                        tempDate.add(dates.get(i));\r\n                        tempEventParticipant.add(eventParticipant.get(i));\r\n                        tempEventParticipantName.add(eventParticipantNames.get(i));\r\n                        Log.d(\"list1\", String.valueOf(eventApplicantsSize.size()));\r\n                    }\r\n                    // hvis der findes en participant\r\n                    else if (!eventParticipant.get(i).equals(\"\")) {\r\n                        // lav en counter til hvor den nye skal indsættes\r\n                        int placement = 0;\r\n                        // gå alle participants igennem som har været der før denne\r\n                        for (int j = 0; j < tempEventParticipant.size(); j++) {\r\n                            // hvis der ikke er nogen participant så ved vi at den nye skal indsættes før j\r\n                            if (tempEventParticipant.get(j).equals(\"\")) {\r\n                                // nu tjekker vi om den nye dato er før de forrige datoer med en participant\r\n                                for (int k = j-1; k >= 0; k--) {\r\n                                    if (!dates.get(i).before(tempDate.get(k))) {\r\n                                        // hvis den ikke er før k så sæt placement counteren til k+1\r\n                                        placement = k+1;\r\n                                    }\r\n                                }\r\n                                // vi looper fra i ned til placement for at rykke alle informationerne\r\n                                for (int k = i; k > placement; k--) {\r\n                                    // tilføj det sidste element i listen igen\r\n                                    if (k == i) {\r\n                                        tempEventPic.add(tempEventPic.get(i - 1));\r\n                                        tempEventHeaders.add(tempEventHeaders.get(i - 1));\r\n                                        tempEventApplicantPic.add(tempEventApplicantPic.get(i - 1));\r\n                                        tempEventApplicantsSize.add(tempEventApplicantsSize.get(i - 1));\r\n                                        tempEventOwnerPic.add(tempEventOwnerPic.get(i - 1));\r\n                                        tempEventFirstApplicants.add(tempEventFirstApplicants.get(i - 1));\r\n                                        tempEventID.add(tempEventID.get(i - 1));\r\n                                        tempDate.add(tempDate.get(i - 1));\r\n                                        tempEventParticipant.add(tempEventParticipant.get(i - 1));\r\n                                        tempEventParticipantName.add(tempEventParticipantName.get(i-1));\r\n                                    }\r\n                                    // fra alle pladser derefter så rykker vi pladsen 1 til højre\r\n                                    else if (k != 0) {\r\n                                        tempEventPic.set(k, tempEventPic.get(k - 1));\r\n                                        tempEventHeaders.set(k, tempEventHeaders.get(k - 1));\r\n                                        tempEventApplicantPic.set(k, tempEventApplicantPic.get(k - 1));\r\n                                        tempEventApplicantsSize.set(k, tempEventApplicantsSize.get(k - 1));\r\n                                        tempEventOwnerPic.set(k, tempEventOwnerPic.get((k - 1)));\r\n                                        tempEventFirstApplicants.set(k, tempEventFirstApplicants.get((k - 1)));\r\n                                        tempEventID.set(k, tempEventID.get(k - 1));\r\n                                        tempDate.set(k, tempDate.get((k - 1)));\r\n                                        tempEventParticipant.set(k, tempEventParticipant.get(k - 1));\r\n                                        tempEventParticipantName.add(tempEventParticipantName.get(i-1));\r\n                                    }\r\n                                }\r\n                                // når vi har rykket alle gamle datoer så indsætter vi den nye dato vi vil indsætte\r\n                                tempEventPic.set(placement, eventEventPic.get(i));\r\n                                tempEventHeaders.set(placement, eventHeaders.get(i));\r\n                                tempEventApplicantPic.set(placement, eventApplicantPic.get(i));\r\n                                tempEventApplicantsSize.set(placement, eventApplicantsSize.get(i));\r\n                                tempEventOwnerPic.set(placement, eventOwnerPic.get(i));\r\n                                tempEventFirstApplicants.set(placement, eventFirstApplicants.get(i));\r\n                                tempEventID.set(placement, eventEventID.get(i));\r\n                                tempDate.set(placement, dates.get(i));\r\n                                tempEventParticipant.set(placement, eventParticipant.get(i));\r\n                                tempEventParticipantName.set(placement,eventParticipantNames.get(i));\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    else if (dates.get(i).before(tempDate.get(i-1)) && tempEventParticipant.get(i-1).equals(\"\")){\r\n                        for (int j = 0; j < i; j++) {\r\n                            // hvis den man vil indsætte kommer efter den dato på plads j\r\n                            if (dates.get(i).before(tempDate.get(j)) && tempEventParticipant.get(j).equals(\"\")) {\r\n                                // iterer fra i'endes plads til j\r\n                                for (int k = i; k > j; k--) {\r\n                                    // ved den første tilføjer vi fra den forriges plads (flyt den sidste dato til en ny plads)\r\n                                    if (k == i) {\r\n                                        tempEventPic.add(tempEventPic.get(i - 1));\r\n                                        tempEventHeaders.add(tempEventHeaders.get(i - 1));\r\n                                        tempEventApplicantPic.add(tempEventApplicantPic.get(i - 1));\r\n                                        tempEventApplicantsSize.add(tempEventApplicantsSize.get(i - 1));\r\n                                        tempEventOwnerPic.add(tempEventOwnerPic.get(i - 1));\r\n                                        tempEventFirstApplicants.add(tempEventFirstApplicants.get(i - 1));\r\n                                        tempEventID.add(tempEventID.get(i - 1));\r\n                                        tempDate.add(tempDate.get(i - 1));\r\n                                        tempEventParticipant.add(tempEventParticipant.get(i-1));\r\n                                        tempEventParticipantName.add(tempEventParticipantName.get(i-1));\r\n                                    }\r\n                                    // fra alle pladser derefter så rykker vi pladsen 1 til højre\r\n                                    else if (k != 0) {\r\n                                        tempEventPic.set(k, tempEventPic.get(k - 1));\r\n                                        tempEventHeaders.set(k, tempEventHeaders.get(k - 1));\r\n                                        tempEventApplicantPic.set(k, tempEventApplicantPic.get(k - 1));\r\n                                        tempEventApplicantsSize.set(k, tempEventApplicantsSize.get(k - 1));\r\n                                        tempEventOwnerPic.set(k, tempEventOwnerPic.get((k - 1)));\r\n                                        tempEventFirstApplicants.set(k, tempEventFirstApplicants.get((k - 1)));\r\n                                        tempEventID.set(k, tempEventID.get(k - 1));\r\n                                        tempDate.set(k, tempDate.get((k - 1)));\r\n                                        tempEventParticipant.set(k, tempEventParticipant.get(k-1));\r\n                                        tempEventParticipantName.set(k, tempEventParticipantName.get(k-1));\r\n\r\n                                    }\r\n                                }\r\n                                // når vi har rykket alle gamle datoer så indsætter vi den nye dato vi vil indsætte\r\n                                tempEventPic.set(j, eventEventPic.get(i));\r\n                                tempEventHeaders.set(j, eventHeaders.get(i));\r\n                                tempEventApplicantPic.set(j, eventApplicantPic.get(i));\r\n                                tempEventApplicantsSize.set(j, eventApplicantsSize.get(i));\r\n                                tempEventOwnerPic.set(j, eventOwnerPic.get(i));\r\n                                tempEventFirstApplicants.set(j, eventFirstApplicants.get(i));\r\n                                tempEventID.set(j, eventEventID.get(i));\r\n                                tempDate.set(j, dates.get(i));\r\n                                tempEventParticipant.set(j,eventParticipant.get(i));\r\n                                tempEventParticipantName.set(j, eventParticipantNames.get(i));\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    else {\r\n                        tempEventPic.add(eventEventPic.get(i));\r\n                        tempEventHeaders.add(eventHeaders.get(i));\r\n                        tempEventApplicantPic.add(eventApplicantPic.get(i));\r\n                        tempEventApplicantsSize.add(eventApplicantsSize.get(i));\r\n                        tempEventOwnerPic.add(eventOwnerPic.get(i));\r\n                        tempEventFirstApplicants.add(eventFirstApplicants.get(i));\r\n                        tempEventID.add(eventEventID.get(i));\r\n                        tempDate.add(dates.get(i));\r\n                        tempEventParticipant.add(eventParticipant.get(i));\r\n                        tempEventParticipantName.add(eventParticipantNames.get(i));\r\n                    }\r\n                }\r\n                this.tempEventID = tempEventID;\r\n                this.tempFirstApplicant = tempEventFirstApplicants;\r\n                this.eventApplicantPic = tempEventApplicantPic;\r\n                this.eventFirstApplicants = tempFirstApplicant;\r\n                this.eventEventID = tempEventID;\r\n                this.eventHeaders = tempEventHeaders;\r\n                this.eventApplicantsSize = tempEventApplicantsSize;\r\n                this.eventOwnerPic = tempEventOwnerPic;\r\n                this.eventEventPic = tempEventPic;\r\n                this.eventParticipant = tempEventParticipant;\r\n                this.eventParticipantNames = tempEventParticipantName;\r\n\r\n                LinearLayoutManager layoutManager = new LinearLayoutManager(root2.getContext(), LinearLayoutManager.VERTICAL, false);\r\n                OwnEvents_Adapter2 eventAdapter = new OwnEvents_Adapter2(root2.getContext(), tempEventPic, tempEventHeaders, tempEventOwnerPic, tempEventFirstApplicants, tempEventApplicantPic, tempEventApplicantsSize, tempEventID, tempDate, tempEventParticipant, tempEventParticipantName);\r\n                recyclerView.setLayoutManager(layoutManager);\r\n                recyclerView.setAdapter(eventAdapter);\r\n            }\r\n        }\r\n\r\n\r\n\r\n    @Override\r\n    public void onAttach(@NotNull Context context){\r\n        super.onAttach(context);\r\n        this.mContext = context;\r\n    }\r\n\r\n    @Override\r\n    public void onDetach(){\r\n        this.mContext = null;\r\n        super.onDetach();\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy(){\r\n        super.onDestroy();\r\n    }\r\n\r\n    // Skal ændres til noget baggrunds halløjsa senere hen\r\n    private void sendNoti(){\r\n        Intent i = new Intent(mContext, Activity_Likeside.class);\r\n        TaskStackBuilder stackBuilder = TaskStackBuilder.create(mContext);\r\n        stackBuilder.addNextIntentWithParentStack(i);\r\n        PendingIntent resultPendingIntent =\r\n                stackBuilder.getPendingIntent(0, PendingIntent.FLAG_UPDATE_CURRENT);\r\n\r\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(mContext, \"0\")\r\n                .setSmallIcon(R.drawable.chat)\r\n                .setContentTitle(\"KOM TILBAGE\")\r\n                .setContentText(\"I miss you bro\")\r\n                .setPriority(NotificationCompat.PRIORITY_DEFAULT);\r\n        NotificationManagerCompat notificationManager = NotificationManagerCompat.from(mContext);\r\n        builder.setContentIntent(resultPendingIntent);\r\n        notificationManager.notify(0, builder.build());\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/A4/oplev/Like_Hjerte_Side/OwnEvent_frag.java	(revision 2ab40f5dbfd056a3a041f8288060b858647ed490)
+++ app/src/main/java/com/A4/oplev/Like_Hjerte_Side/OwnEvent_frag.java	(date 1611064338773)
@@ -343,6 +343,7 @@
                 OwnEvents_Adapter2 eventAdapter = new OwnEvents_Adapter2(root2.getContext(), tempEventPic, tempEventHeaders, tempEventOwnerPic, tempEventFirstApplicants, tempEventApplicantPic, tempEventApplicantsSize, tempEventID, tempDate, tempEventParticipant, tempEventParticipantName);
                 recyclerView.setLayoutManager(layoutManager);
                 recyclerView.setAdapter(eventAdapter);
+
             }
         }
 
diff --git .idea/shelf/Uncommitted_changes_before_Merge_at_14-01-2021_14_37__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Merge_at_14-01-2021_14_37__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Merge_at_13-01-2021_12_54__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Merge_at_13-01-2021_12_54__Default_Changelist_.xml
